id: go.insecure.xss.reflected_input
title: "XSS via Reflected Input"
category: "security"
severity: "HIGH"
description: |
  Unescaped user input is being written directly into the HTTP response,
  which can lead to reflected Cross-Site Scripting (XSS) vulnerabilities.
  Ensure that all user-controlled values are properly escaped before writing
  to HTML output.

match:
  pattern: "w.Write([]byte({{input}}))"
  filters:
    - type: param
      sources:
        - http.Request.FormValue
        - http.Request.URL.Query().Get
        - http.Request.PostFormValue
        - r.FormValue
    - type: file_ext
      include:
        - ".go"
    - type: package
      allow:
        - net/http

suggestion: "Use html.EscapeString() to sanitize user input"
references:
  - https://owasp.org/www-community/attacks/xss/
  - https://pkg.go.dev/html/template#HTMLEscapeString
enabled: true

---
id: go.insecure.sql_injection
title: "SQL Injection via String Concatenation"
category: "security"
severity: "CRITICAL"
description: |
  User input is being concatenated directly into SQL queries,
  which can lead to SQL injection vulnerabilities.
  Use prepared statements or parameterized queries instead.

match:
  pattern: 'fmt.Sprintf("SELECT.*%s.*", {{input}})'
  filters:
    - type: param
      sources:
        - r.FormValue
        - r.URL.Query().Get
        - r.PostFormValue
    - type: call
      sources:
        - database/sql.DB.Query
        - database/sql.DB.QueryRow
        - database/sql.DB.Exec

suggestion: "Use prepared statements with parameterized queries"
references:
  - https://owasp.org/www-community/attacks/SQL_Injection
enabled: true

---
id: go.insecure.command_injection
title: "Command Injection via exec.Command"
category: "security"
severity: "CRITICAL"
description: |
  User input is being passed directly to exec.Command,
  which can lead to command injection vulnerabilities.

match:
  pattern: "exec.Command({{input}})"
  filters:
    - type: param
      sources:
        - r.FormValue
        - r.URL.Query().Get
        - os.Getenv
    - type: call
      sources:
        - os/exec.Command

suggestion: "Validate and sanitize user input before passing to exec.Command"
references:
  - https://owasp.org/www-community/attacks/Command_Injection
enabled: true
