package testdata

import (
	"crypto"
	"crypto/aes"
	"crypto/cipher"
	"crypto/des"
	"crypto/dsa"
	"crypto/hmac"
	"crypto/md5"
	"crypto/rc4"
	"crypto/rsa"
	"crypto/sha1"
	"crypto/tls"
	"crypto/x509"
	"crypto/x509/pkix"
	"encoding/hex"
	"fmt"
	"math/rand"
	"time"
)

// Weak hash function usage - MD5
func weakMD5Hash(data []byte) string {
	h := md5.New()
	h.Write(data)
	return hex.EncodeToString(h.Sum(nil))
}

// Weak hash function usage - SHA1
func weakSHA1Hash(data []byte) string {
	h := sha1.New()
	h.Write(data)
	return hex.EncodeToString(h.Sum(nil))
}

// Weak hash function usage - MD5 with crypto/md5
func weakMD5HashCrypto(data []byte) string {
	hash := md5.Sum(data)
	return hex.EncodeToString(hash[:])
}

// Weak hash function usage - SHA1 with crypto/sha1
func weakSHA1HashCrypto(data []byte) string {
	hash := sha1.Sum(data)
	return hex.EncodeToString(hash[:])
}

// Weak encryption algorithm - DES
func weakDESEncrypt(key, plaintext []byte) ([]byte, error) {
	block, err := des.NewCipher(key)
	if err != nil {
		return nil, err
	}
	
	ciphertext := make([]byte, len(plaintext))
	block.Encrypt(ciphertext, plaintext)
	return ciphertext, nil
}

// Weak encryption algorithm - RC4
func weakRC4Encrypt(key, plaintext []byte) ([]byte, error) {
	cipher, err := rc4.NewCipher(key)
	if err != nil {
		return nil, err
	}
	
	ciphertext := make([]byte, len(plaintext))
	cipher.XORKeyStream(ciphertext, plaintext)
	return ciphertext, nil
}

// Weak random number generation - math/rand
func weakRandomNumber() int {
	return mathrand.Intn(1000)
}

// Weak random number generation - math/rand with seed
func weakRandomWithSeed() int {
	mathrand.Seed(time.Now().UnixNano())
	return mathrand.Intn(1000)
}

// Weak random number generation - math/rand Float64
func weakRandomFloat() float64 {
	return mathrand.Float64()
}

// Weak random number generation - math/rand Int31
func weakRandomInt31() int32 {
	return mathrand.Int31()
}

// Weak random number generation - math/rand Int63
func weakRandomInt63() int64 {
	return mathrand.Int63()
}

// Weak key derivation - simple hash
func weakKeyDerivation(password []byte, salt []byte) []byte {
	h := md5.New()
	h.Write(password)
	h.Write(salt)
	return h.Sum(nil)
}

// Weak key derivation - SHA1
func weakKeyDerivationSHA1(password []byte, salt []byte) []byte {
	h := sha1.New()
	h.Write(password)
	h.Write(salt)
	return h.Sum(nil)
}

// Weak signature algorithm - RSA with small key
func weakRSASignature(privateKey *rsa.PrivateKey, data []byte) ([]byte, error) {
	// Using MD5 for signature (weak)
	h := md5.New()
	h.Write(data)
	hashed := h.Sum(nil)
	
	return rsa.SignPKCS1v15(nil, privateKey, crypto.MD5, hashed)
}

// Weak signature algorithm - DSA with small key
func weakDSASignature(privateKey *dsa.PrivateKey, data []byte) ([]byte, error) {
	// Using SHA1 for signature (weak)
	h := sha1.New()
	h.Write(data)
	hashed := h.Sum(nil)
	
	r, s, err := dsa.Sign(cryptorand.Reader, privateKey, hashed)
	if err != nil {
		return nil, err
	}
	
	// Convert to bytes (simplified)
	signature := append(r.Bytes(), s.Bytes()...)
	return signature, nil
}

// Weak cipher mode - ECB
func weakECBMode(key []byte, plaintext []byte) ([]byte, error) {
	block, err := aes.NewCipher(key)
	if err != nil {
		return nil, err
	}
	
	// Using ECB mode (weak)
	ciphertext := make([]byte, len(plaintext))
	for i := 0; i < len(plaintext); i += block.BlockSize() {
		block.Encrypt(ciphertext[i:i+block.BlockSize()], plaintext[i:i+block.BlockSize()])
	}
	return ciphertext, nil
}

// Weak cipher mode - CBC without proper IV
func weakCBCMode(key []byte, plaintext []byte) ([]byte, error) {
	block, err := aes.NewCipher(key)
	if err != nil {
		return nil, err
	}
	
	// Using CBC with fixed IV (weak)
	iv := make([]byte, block.BlockSize())
	ciphertext := make([]byte, len(plaintext))
	
	mode := cipher.NewCBCEncrypter(block, iv)
	mode.CryptBlocks(ciphertext, plaintext)
	return ciphertext, nil
}

// Weak HMAC - using MD5
func weakHMACMD5(key, data []byte) []byte {
	h := hmac.New(md5.New, key)
	h.Write(data)
	return h.Sum(nil)
}

// Weak HMAC - using SHA1
func weakHMACSHA1(key, data []byte) []byte {
	h := hmac.New(sha1.New, key)
	h.Write(data)
	return h.Sum(nil)
}

// Weak password hashing - simple MD5
func weakPasswordHash(password string) string {
	h := md5.New()
	h.Write([]byte(password))
	return hex.EncodeToString(h.Sum(nil))
}

// Weak password hashing - simple SHA1
func weakPasswordHashSHA1(password string) string {
	h := sha1.New()
	h.Write([]byte(password))
	return hex.EncodeToString(h.Sum(nil))
}

// Weak certificate - using MD5
func weakCertificateMD5() *x509.Certificate {
	return &x509.Certificate{
		Subject: pkix.Name{
			CommonName: "weak-cert-md5",
		},
		// Using MD5 for signature (weak)
		SignatureAlgorithm: x509.MD5WithRSA,
	}
}

// Weak certificate - using SHA1
func weakCertificateSHA1() *x509.Certificate {
	return &x509.Certificate{
		Subject: pkix.Name{
			CommonName: "weak-cert-sha1",
		},
		// Using SHA1 for signature (weak)
		SignatureAlgorithm: x509.SHA1WithRSA,
	}
}

// Weak TLS configuration - using weak ciphers
func weakTLSConfig() *tls.Config {
	return &tls.Config{
		MinVersion: tls.VersionTLS10,
		MaxVersion: tls.VersionTLS12,
		CipherSuites: []uint16{
			tls.TLS_RSA_WITH_RC4_128_SHA,           // Weak RC4
			tls.TLS_RSA_WITH_DES_CBC_SHA,           // Weak DES
			tls.TLS_RSA_WITH_3DES_EDE_CBC_SHA,      // Weak 3DES
		},
	}
}

// Weak hash function - custom MD5 implementation
func customWeakHash(data []byte) string {
	// Custom weak hash implementation
	h := md5.New()
	h.Write(data)
	return hex.EncodeToString(h.Sum(nil))
}

// Weak hash function - custom SHA1 implementation
func customWeakHashSHA1(data []byte) string {
	// Custom weak hash implementation
	h := sha1.New()
	h.Write(data)
	return hex.EncodeToString(h.Sum(nil))
}

// Weak random - custom implementation
func customWeakRandom() int {
	// Custom weak random implementation
	return rand.Intn(1000)
}

// Weak encryption - custom DES implementation
func customWeakEncrypt(key, plaintext []byte) ([]byte, error) {
	// Custom weak encryption implementation
	block, err := des.NewCipher(key)
	if err != nil {
		return nil, err
	}
	
	ciphertext := make([]byte, len(plaintext))
	block.Encrypt(ciphertext, plaintext)
	return ciphertext, nil
}

// Weak signature - custom implementation
func customWeakSignature(privateKey *rsa.PrivateKey, data []byte) ([]byte, error) {
	// Custom weak signature implementation
	h := md5.New()
	h.Write(data)
	hashed := h.Sum(nil)
	
	return rsa.SignPKCS1v15(nil, privateKey, crypto.MD5, hashed)
}

// Weak key derivation - custom implementation
func customWeakKeyDerivation(password []byte, salt []byte) []byte {
	// Custom weak key derivation implementation
	h := md5.New()
	h.Write(password)
	h.Write(salt)
	return h.Sum(nil)
}

// Weak cipher mode - custom implementation
func customWeakCipherMode(key []byte, plaintext []byte) ([]byte, error) {
	// Custom weak cipher mode implementation
	block, err := aes.NewCipher(key)
	if err != nil {
		return nil, err
	}
	
	// Using ECB mode (weak)
	ciphertext := make([]byte, len(plaintext))
	for i := 0; i < len(plaintext); i += block.BlockSize() {
		block.Encrypt(ciphertext[i:i+block.BlockSize()], plaintext[i:i+block.BlockSize()])
	}
	return ciphertext, nil
}

// Example usage functions
func exampleWeakHashUsage() {
	data := []byte("sensitive data")
	
	// Weak hash usage
	md5Hash := weakMD5Hash(data)
	sha1Hash := weakSHA1Hash(data)
	
	fmt.Printf("MD5: %s\n", md5Hash)
	fmt.Printf("SHA1: %s\n", sha1Hash)
}

func exampleWeakEncryptionUsage() {
	key := []byte("weakkey123")
	plaintext := []byte("sensitive data")
	
	// Weak encryption usage
	desCipher, _ := weakDESEncrypt(key, plaintext)
	rc4Cipher, _ := weakRC4Encrypt(key, plaintext)
	
	fmt.Printf("DES: %x\n", desCipher)
	fmt.Printf("RC4: %x\n", rc4Cipher)
}

func exampleWeakRandomUsage() {
	// Weak random usage
	weakNum := weakRandomNumber()
	weakFloat := weakRandomFloat()
	
	fmt.Printf("Weak Random: %d\n", weakNum)
	fmt.Printf("Weak Float: %f\n", weakFloat)
}

func exampleWeakKeyDerivationUsage() {
	password := []byte("password123")
	salt := []byte("salt123")
	
	// Weak key derivation usage
	weakKey := weakKeyDerivation(password, salt)
	weakKeySHA1 := weakKeyDerivationSHA1(password, salt)
	
	fmt.Printf("Weak Key: %x\n", weakKey)
	fmt.Printf("Weak Key SHA1: %x\n", weakKeySHA1)
}

func exampleWeakSignatureUsage() {
	// This would require actual key generation
	fmt.Println("Weak signature examples would require actual keys")
}

func exampleWeakCipherModeUsage() {
	key := []byte("aeskey123456789")
	plaintext := []byte("sensitive data")
	
	// Weak cipher mode usage
	ecbCipher, _ := weakECBMode(key, plaintext)
	cbcCipher, _ := weakCBCMode(key, plaintext)
	
	fmt.Printf("ECB: %x\n", ecbCipher)
	fmt.Printf("CBC: %x\n", cbcCipher)
}

func exampleWeakHMACUsage() {
	key := []byte("hmackey123")
	data := []byte("sensitive data")
	
	// Weak HMAC usage
	weakHMACMD5 := weakHMACMD5(key, data)
	weakHMACSHA1 := weakHMACSHA1(key, data)
	
	fmt.Printf("Weak HMAC MD5: %x\n", weakHMACMD5)
	fmt.Printf("Weak HMAC SHA1: %x\n", weakHMACSHA1)
}

func exampleWeakPasswordHashUsage() {
	password := "password123"
	
	// Weak password hash usage
	weakHash := weakPasswordHash(password)
	weakHashSHA1 := weakPasswordHashSHA1(password)
	
	fmt.Printf("Weak Password Hash MD5: %s\n", weakHash)
	fmt.Printf("Weak Password Hash SHA1: %s\n", weakHashSHA1)
}

func exampleWeakCertificateUsage() {
	// Weak certificate usage
	weakCertMD5 := weakCertificateMD5()
	weakCertSHA1 := weakCertificateSHA1()
	
	fmt.Printf("Weak Cert MD5: %s\n", weakCertMD5.Subject.CommonName)
	fmt.Printf("Weak Cert SHA1: %s\n", weakCertSHA1.Subject.CommonName)
}

func exampleWeakTLSConfigUsage() {
	// Weak TLS config usage
	weakConfig := weakTLSConfig()
	
	fmt.Printf("Weak TLS Config: %v\n", weakConfig.CipherSuites)
}

func exampleCustomWeakUsage() {
	data := []byte("sensitive data")
	key := []byte("key123")
	password := []byte("password123")
	salt := []byte("salt123")
	
	// Custom weak implementations
	customHash := customWeakHash(data)
	customRandom := customWeakRandom()
	customEncrypt, _ := customWeakEncrypt(key, data)
	customKeyDerivation := customWeakKeyDerivation(password, salt)
	customCipherMode, _ := customWeakCipherMode(key, data)
	
	fmt.Printf("Custom Weak Hash: %s\n", customHash)
	fmt.Printf("Custom Weak Random: %d\n", customRandom)
	fmt.Printf("Custom Weak Encrypt: %x\n", customEncrypt)
	fmt.Printf("Custom Weak Key Derivation: %x\n", customKeyDerivation)
	fmt.Printf("Custom Weak Cipher Mode: %x\n", customCipherMode)
} 