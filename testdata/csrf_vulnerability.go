package testdata

import (
	"database/sql"
	"fmt"
	"net/http"
)

// CSRF vulnerable handler - missing CSRF protection
func (h *Handler) CreateUserHandler(w http.ResponseWriter, r *http.Request) {
	// Missing CSRF token validation
	userID := r.FormValue("user_id")
	username := r.FormValue("username")
	
	// Direct database write without CSRF protection
	db.Exec("INSERT INTO users (id, username) VALUES (?, ?)", userID, username)
	
	fmt.Fprintf(w, "User created: %s", username)
}

// CSRF vulnerable handler - state changing operation
func (h *Handler) UpdateUserHandler(w http.ResponseWriter, r *http.Request) {
	// Missing CSRF protection
	userID := r.FormValue("user_id")
	newEmail := r.FormValue("email")
	
	// Database write operation without CSRF protection
	db.Exec("UPDATE users SET email = ? WHERE id = ?", newEmail, userID)
	
	fmt.Fprintf(w, "User updated: %s", userID)
}

// CSRF vulnerable handler - payment operation
func (h *Handler) ProcessPaymentHandler(w http.ResponseWriter, r *http.Request) {
	// Missing CSRF protection for payment
	amount := r.FormValue("amount")
	accountID := r.FormValue("account_id")
	
	// Critical state-changing operation without CSRF protection
	db.Exec("INSERT INTO transactions (amount, account_id) VALUES (?, ?)", amount, accountID)
	
	fmt.Fprintf(w, "Payment processed: $%s", amount)
}

// CSRF vulnerable handler - delete operation
func (h *Handler) DeleteUserHandler(w http.ResponseWriter, r *http.Request) {
	// Missing CSRF protection
	userID := r.FormValue("user_id")
	
	// Database delete without CSRF protection
	db.Exec("DELETE FROM users WHERE id = ?", userID)
	
	fmt.Fprintf(w, "User deleted: %s", userID)
}

// CSRF vulnerable handler - login operation
func (h *Handler) LoginHandler(w http.ResponseWriter, r *http.Request) {
	// Missing CSRF protection for login
	username := r.FormValue("username")
	_ = r.FormValue("password") // Ignore password for demo
	
	// State-changing operation (session creation) without CSRF protection
	db.Exec("INSERT INTO sessions (user_id) SELECT id FROM users WHERE username = ?", username)
	
	fmt.Fprintf(w, "Logged in: %s", username)
}

// CSRF vulnerable handler - logout operation
func (h *Handler) LogoutHandler(w http.ResponseWriter, r *http.Request) {
	// Missing CSRF protection for logout
	sessionID := r.FormValue("session_id")
	
	// State-changing operation without CSRF protection
	db.Exec("DELETE FROM sessions WHERE id = ?", sessionID)
	
	fmt.Fprintf(w, "Logged out")
}

// CSRF vulnerable handler - password reset
func (h *Handler) ResetPasswordHandler(w http.ResponseWriter, r *http.Request) {
	// Missing CSRF protection for password reset
	userID := r.FormValue("user_id")
	newPassword := r.FormValue("new_password")
	
	// Critical state-changing operation without CSRF protection
	db.Exec("UPDATE users SET password = ? WHERE id = ?", newPassword, userID)
	
	fmt.Fprintf(w, "Password reset for user: %s", userID)
}

// CSRF vulnerable handler - transfer money
func (h *Handler) TransferMoneyHandler(w http.ResponseWriter, r *http.Request) {
	// Missing CSRF protection for money transfer
	fromAccount := r.FormValue("from_account")
	toAccount := r.FormValue("to_account")
	amount := r.FormValue("amount")
	
	// Critical financial operation without CSRF protection
	db.Exec("UPDATE accounts SET balance = balance - ? WHERE id = ?", amount, fromAccount)
	db.Exec("UPDATE accounts SET balance = balance + ? WHERE id = ?", amount, toAccount)
	
	fmt.Fprintf(w, "Transfer completed: $%s", amount)
}

// CSRF vulnerable handler - order creation
func (h *Handler) CreateOrderHandler(w http.ResponseWriter, r *http.Request) {
	// Missing CSRF protection for order creation
	userID := r.FormValue("user_id")
	productID := r.FormValue("product_id")
	quantity := r.FormValue("quantity")
	
	// State-changing operation without CSRF protection
	db.Exec("INSERT INTO orders (user_id, product_id, quantity) VALUES (?, ?, ?)", userID, productID, quantity)
	
	fmt.Fprintf(w, "Order created for user: %s", userID)
}

// Handler struct for HTTP handlers
type Handler struct {
	db *sql.DB
}

var db *sql.DB 